version: 2.1
jobs:
  # Build Front-end
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install -qq
            npm run build -qq

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  #Build Back-end
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install -qq package.json
             npm install -qq
             npm run build -qq
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  #Test Front-end
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install jest
            npm run test

  #Test Back-end
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install jest
            npm run test

  #Scan Front-end pacakages & security holes
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm audit fix
            #npm audit --audit-level=critical --force

  #Scan Back-end pacakages & security holes
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end dependencies
          command: |
            cd backend
            npm audit fix
            #npm audit --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags Project=udapeople \
            --stack-name "bckend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-west-2

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/

            SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text)

            echo $SERVER_IP >> inventory.txt
            cat inventory.txt
            ls ~/project/backend
            cp inventory.txt ~/project/backend
            ls ~/project/backend

      - persist_to_workspace:
          root: ~/project/
          paths:
            - backend/inventory.txt

      #Store
      - run:
          name: Backend ID
          command: |
            curl -H "Content-Type: text/plain" -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$serverIP" https://api.memstash.io/values/backendip
            cat ~/project/.circleci/ansible/inventory.txt
            pwd

      #Frontend deploy infra
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project=udapeople \
            --stack-name "frntend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-west-2

      # Here's where you will add some code to rollback on failure
      #- destroy-environment



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
